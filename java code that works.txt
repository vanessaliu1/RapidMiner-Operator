package com.rapidminer.operator.preprocessing.transformation;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.rapidminer.example.Attribute;
import com.rapidminer.example.Example;
import com.rapidminer.example.ExampleReader;
import com.rapidminer.example.ExampleSet;
import com.rapidminer.example.table.AttributeFactory;
import com.rapidminer.example.table.DataRow;
import com.rapidminer.example.table.DataRowFactory;
import com.rapidminer.example.table.DataRowReader;
import com.rapidminer.example.table.ExampleTable;
import com.rapidminer.example.table.MemoryExampleTable;
import com.rapidminer.operator.Annotations;
import com.rapidminer.operator.Operator;
import com.rapidminer.operator.OperatorDescription;
import com.rapidminer.operator.OperatorException;
import com.rapidminer.operator.UserError;
import com.rapidminer.operator.io.ExampleSource;
import com.rapidminer.operator.ports.OutputPort;
import com.rapidminer.operator.ports.metadata.AttributeMetaData;
import com.rapidminer.operator.ports.metadata.ExampleSetMetaData;
import com.rapidminer.operator.ports.metadata.MetaData;
import com.rapidminer.parameter.ParameterType;
import com.rapidminer.parameter.ParameterTypeCategory;
import com.rapidminer.tools.I18N;
import com.rapidminer.tools.LogService;
import com.rapidminer.tools.Ontology;
import com.rapidminer.tools.ParameterService;
import com.rapidminer.tools.Tools;
import com.rapidminer.tools.jdbc.ColumnIdentifier;
import com.rapidminer.tools.jdbc.DatabaseHandler;
import com.rapidminer.tools.jdbc.StatementCreator;
import com.rapidminer.tools.jdbc.TableName;
import com.rapidminer.tools.jdbc.connection.ConnectionEntry;

public class readFromDatabase extends Operator {

       public readFromDatabase(OperatorDescription description) {
              super(description);
              // TODO Auto-generated constructor stub
       }

       private OutputPort exampleSetOutput = getOutputPorts().createPort("exampleset");
       // introduces the jdbc driver and the database url
       final static String JDBC_DRIVER = "org.postgresql.Driver";
       final static String DB_URL = "jdbc:postgresql://localhost:5432/postgres";

       // initialises the username and password
       final static String USER = "postgres";
       final static String PASS = "password";

       static Connection conn = null;
       static Statement stmt = null;
       public static ResultSet rs;
       static ResultSet resultSet;
       static DatabaseHandler dataBaseHandler;
       static List<Attribute> attributes = new ArrayList<Attribute>();
       static ArrayList<String> columnNames = new ArrayList<String>();
       static int rowCount = 0;
       static ArrayList<ArrayList> allRows;
       static ArrayList<String> allRowData;
       public static final String PROPERTY_EVALUATE_MD_FOR_SQL_QUERIES = "rapidminer.gui.evaluate_meta_data_for_sql_queries";
       public static Logger log;
       public MetaData md;
       public ExampleSet es;
       public ExampleReader exr;
       public DataRowReader drr;
       public Example e;
       public HashMap<Integer, String> data;

       public static void main(String[] args) throws OperatorException, SQLException {
              // TODO Auto-generated method stub
              DBconnect();
              resultSet = executeQuery();
              if (resultSet == null) {
                     System.out.println("HOW");
              } else {
                     System.out.println(resultSet);
              }
              
              LogService.getRoot().log(Level.INFO, "A");
              attributes = getAttributes(resultSet);
              LogService.getRoot().log(Level.INFO, "B");
              ExampleTable et = createExampleTable(executeQuery(), attributes, rowCount, log);
              System.out.println(et);
              // md = getGeneratedMetaData();
              LogService.getRoot().log(Level.INFO, "C");
              ExampleSet exs = et.createExampleSet();
              System.out.println(exs);
              while (resultSet.next()) {
                     System.out.println(rowCount);
                     rowCount++;
                     // DataRow re = et.getDataRow(rowCount);
                     // System.out.println();
                     // Example e = new Example(et.getDataRow(0), exs);
              }
              System.out.println();
       }

       // a method to connect to the database
       public static void DBconnect() {
              try {
                     Class.forName(JDBC_DRIVER);
                     System.out.println("Attempting to connetc to the database");
                     conn = DriverManager.getConnection(DB_URL, USER, PASS);
                     System.out.println("Connected Successfully");
              } catch (ClassNotFoundException | SQLException e) {
                     // TODO Auto-Generated catch block
                     e.printStackTrace();
                     System.out.println("Connection Failed");
              }
       }

       // a methods to close the connection
       public static void DBconnectionClose() throws SQLException {
              conn.close();
       }

       // executes the sql query and returns a result set
       public static ResultSet executeQuery() throws SQLException {
              LogService.getRoot().log(Level.INFO, "xx1");
              String sql1 = "DROP TABLE IF EXISTS public.java_test_1;";
              String sql2 = "CREATE TABLE public.java_test_1 AS " + "SELECT * FROM sandpit_rm_test.test_table_1";
              String sql3 = "SELECT * FROM public.java_test_1";

              System.out.println("running query");
              try {
                     stmt = conn.createStatement();

                     // Drop table
                     stmt.executeUpdate(sql1);
                     // Create table
                     stmt.executeUpdate(sql2);
                     // GetResults
                     rs = stmt.executeQuery(sql3);
                     // Gets all column names
                     while (rs.next()) {
                           for (int i = 1; i < rs.getMetaData().getColumnCount() + 1; i++) {
                                  String val = rs.getString(i);
                                  System.out.print(" | " + rs.getString(i));
                                  allRowData = new ArrayList<String>();
                                  allRowData.add(val);

                           }
                     }
                     /*
                     * ResultSetMetaData rsmd = rs.getMetaData(); int colCount =
                     * rsmd.getColumnCount(); for (int i = 1; i < colCount + 1; i++) {
                     * columnNames.add(rsmd.getColumnName(i)); } rowCount = rs.getRow();
                     * String name = rsmd.getColumnName(1);
                     */
              } catch (SQLException e) {
                     // TODO auto-generate catch block
                     e.printStackTrace();
                     System.out.println("Query Failed to Execute");
              }
              return stmt.executeQuery(sql3);
       };

       // a method to create an example set
       public ExampleSet createExampleSet() throws OperatorException, SQLException {
              ResultSet resultSet = executeQuery();
              MemoryExampleTable table;
              try {
                     List<Attribute> attributes = getAttributes(resultSet);
                     table = createExampleTable(resultSet, attributes, getParameterAsInt(ExampleSource.PARAMETER_DATAMANAGEMENT), getLogger());
              } catch (SQLException e) {
                     throw new UserError(this, e, 304, e.getMessage());
              } finally {
                     try {
                           resultSet.close();
                     } catch (SQLException e) {
                           getLogger().log(Level.WARNING, "DB error closing result set: " + e, e);
                     }
              }
              return table.createExampleSet();
       }

       // a method to return the metadata for the resultset
       public MetaData getGeneratedMetaData() throws OperatorException {
              LogService.getRoot().log(Level.INFO, "XY2");
              ExampleSetMetaData metaData = new ExampleSetMetaData();
              try {
                     dataBaseHandler = DatabaseHandler.getConnectedDatabaseHandler(this);
                     LogService.getRoot().log(Level.INFO, "Z1");
                     switch (getParameterAsInt(DatabaseHandler.PARAMETER_DEFINE_QUERY)) {
                     case DatabaseHandler.QUERY_TABLE:
                           
                           
                           List<ColumnIdentifier> columns = dataBaseHandler.getAllColumnNames(DatabaseHandler.getSelectedTableName(this), dataBaseHandler
                                         .getConnection().getMetaData());
                                                
                           for (ColumnIdentifier column : columns) {
                                  metaData.addAttribute(new AttributeMetaData(column.getColumnName(), DatabaseHandler.getRapidMinerTypeIndex(column.getSqlType())));
                           }
                           break;
                     case DatabaseHandler.QUERY_QUERY:
                     case DatabaseHandler.QUERY_FILE:
                     default:
                           if (!"false".equals(ParameterService.getParameterValue(PROPERTY_EVALUATE_MD_FOR_SQL_QUERIES))) {
                                  String query = getQuery(dataBaseHandler.getStatementCreator());
                                  PreparedStatement prepared = dataBaseHandler.getConnection().prepareStatement(query);
                                  List<Attribute> attributes = getAttributess(prepared.getMetaData());
                                  for (Attribute att : attributes) {
                                         metaData.addAttribute(new AttributeMetaData(att));
                                  }
                                  prepared.close();
                           }
                           break;
                     }
              } catch (SQLException e) {
                     LogService.getRoot().log(
                                  Level.WARNING,
                                  I18N.getMessage(LogService.getRoot().getResourceBundle(),
                                                "com.rapidminer.operator.io.DatabaseDataReader.fetching_meta_data_error", e), e);

              } finally {
                     try {
                           if (dataBaseHandler != null && dataBaseHandler.getConnection() != null) {
                                  dataBaseHandler.disconnect();
                           }
                     } catch (SQLException e) {
                           getLogger().log(Level.WARNING, "DB error closing connection: " + e, e);
                     }
              }
              return metaData;
       }

       // a memory example table
       public static MemoryExampleTable createExampleTable(final ResultSet resultSet, final List<Attribute> attributes, final int dataManagementType,
                     final Logger logger) throws SQLException, OperatorException {
              LogService.getRoot().log(Level.INFO, "B1");
              
              
              ResultSetMetaData metaData = resultSet.getMetaData();

              Attribute[] attributeArray = attributes.toArray(new Attribute[attributes.size()]);
              if (attributeArray == null){
                     LogService.getRoot().log(Level.INFO, "array is empty");
              }else{
                     LogService.getRoot().log(Level.INFO, "we're good");
              }
              MemoryExampleTable table = new MemoryExampleTable(attributes);
              DataRowFactory factory = new DataRowFactory(dataManagementType, '.');

              while (resultSet.next()) {
                     DataRow dataRow = factory.create(attributeArray.length);
                     
                     LogService.getRoot().log(Level.INFO, "B11");
                     for (int i = 0; i <= metaData.getColumnCount() - 1; i++) {
                           LogService.getRoot().log(Level.INFO, "B12");
                           
                           
                           
                           LogService.getRoot().log(Level.INFO, "B13");
                           
                           Attribute attribute = attributeArray[i];
                           LogService.getRoot().log(Level.INFO, "B14");
                           int valueType = attribute.getValueType();
                           double value;
                           if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.DATE_TIME)) {
                                  Timestamp timestamp = resultSet.getTimestamp(i);
                                  if (resultSet.wasNull()) {
                                         value = Double.NaN;
                                  } else {
                                         value = timestamp.getTime();
                                  }
                           } else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NUMERICAL)) {
                                  value = resultSet.getDouble(i);
                                  if (resultSet.wasNull()) {
                                         value = Double.NaN;
                                  }
                           } else {
                                  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NOMINAL)) {
                                         String valueString;
                                         if (metaData.getColumnType(i+1) == Types.CLOB) {
                                                Clob clob = resultSet.getClob(i+1);
                                                if (clob != null) {
                                                       BufferedReader in = null;
                                                       try {
                                                              in = new BufferedReader(clob.getCharacterStream());
                                                              String line = null;
                                                              try {
                                                                     StringBuffer buffer = new StringBuffer();
                                                                     while ((line = in.readLine()) != null) {
                                                                           buffer.append(line + "\n");
                                                                     }
                                                                     valueString = buffer.toString();
                                                              } catch (IOException e) {
                                                                     throw new OperatorException("Database error occurred: " + e, e);
                                                              }
                                                       } finally {
                                                              try {
                                                                     in.close();
                                                              } catch (IOException e) {
                                                              }
                                                       }
                                                } else {
                                                       valueString = null;
                                                }
                                         } else {
                                                valueString = resultSet.getString(i+1);
                                         }
                                         if (resultSet.wasNull() || valueString == null) {
                                                value = Double.NaN;
                                         } else {
                                                value = attribute.getMapping().mapString(valueString);
                                         }
                                  } else {
                                         if (logger != null) {
                                                logger.warning("Unknown column type: " + attribute);
                                         }
                                         value = Double.NaN;
                                  }
                           }
                           
                           dataRow.set(attribute, value);
                           // data[i-1] = value;
                     }
                     table.addDataRow(dataRow);
              }
              return table;
       }

       // an array list of attributes
       public static List<Attribute> getAttributes(final ResultSet resultSet) throws SQLException {
              LogService.getRoot().log(Level.INFO, "A1");
              ResultSetMetaData metaData = resultSet.getMetaData();
              return getAttributess(metaData);
       }

       private static List<Attribute> getAttributess(final ResultSetMetaData metaData) throws SQLException {
              LogService.getRoot().log(Level.INFO, "A2");
              List<Attribute> result = new LinkedList<>();

              if (metaData != null) {
                     // A map mapping original column names to a counter specifying how
                     // often
                     // they were chosen
                     Map<String, Integer> duplicateNameMap = new HashMap<>();

                     for (int columnIndex = 1; columnIndex <= metaData.getColumnCount(); columnIndex++) {

                           // column name from DB
                           String dbColumnName = metaData.getColumnLabel(columnIndex);

                           // name that will be used in example set
                           String columnName = dbColumnName;

                           // check original name first
                           Integer duplicateCount = duplicateNameMap.get(dbColumnName);
                           boolean isUnique = duplicateCount == null;
                           if (isUnique) {
                                  // name is unique
                                  duplicateNameMap.put(columnName, new Integer(1));
                           } else {
                                  // name already present, iterate until unique
                                  while (!isUnique) {
                                         // increment duplicate counter
                                         duplicateCount = new Integer(duplicateCount.intValue() + 1);

                                         // create new name proposal
                                         columnName = dbColumnName + "_" + (duplicateCount - 1); // -1
                                                                                                                                         // because
                                                                                                                                         // of
                                                                                                                                         // compatibility

                                         // check if new name is already taken
                                         isUnique = duplicateNameMap.get(columnName) == null;
                                  }

                                  // save new duplicate count for old db column name
                                  duplicateNameMap.put(dbColumnName, duplicateCount);
                           }

                           int attributeType = DatabaseHandler.getRapidMinerTypeIndex(metaData.getColumnType(columnIndex));
                           final Attribute attribute = AttributeFactory.createAttribute(columnName, attributeType);
                           attribute.getAnnotations().setAnnotation("sql_type", metaData.getColumnTypeName(columnIndex));
                           result.add(attribute);
                     }
              }

              return result;
       }

       private String getQuery(final StatementCreator sc) throws OperatorException {
              switch (getParameterAsInt(DatabaseHandler.PARAMETER_DEFINE_QUERY)) {
              case DatabaseHandler.QUERY_QUERY: {
                     String query = getParameterAsString(DatabaseHandler.PARAMETER_QUERY);
                     if (query != null) {
                           query = query.trim();
                     }
                     return query;
              }
              case DatabaseHandler.QUERY_FILE: {
                     File queryFile = getParameterAsFile(DatabaseHandler.PARAMETER_QUERY_FILE);
                     if (queryFile != null) {
                           String query = null;
                           try {
                                  query = Tools.readTextFile(queryFile);
                           } catch (IOException ioe) {
                                  throw new UserError(this, ioe, 302, new Object[] { queryFile, ioe.getMessage() });
                           }
                           if (query == null || query.trim().length() == 0) {
                                  throw new UserError(this, 205, queryFile);
                           }
                           return query;
                     }
              }
              case DatabaseHandler.QUERY_TABLE:
                     TableName tableName = DatabaseHandler.getSelectedTableName(this);
                     return "SELECT * FROM " + sc.makeIdentifier(tableName);
              }
              return null;
       }

       public ConnectionEntry getConnectionEntry() {
              return DatabaseHandler.getConnectionEntry(this);
       }

       protected void addAnnotations(final ExampleSet result) {
              try {
                     if (dataBaseHandler != null) {
                           result.getAnnotations().setAnnotation(Annotations.KEY_SOURCE, getQuery(dataBaseHandler.getStatementCreator()));
                     }
              } catch (OperatorException e) {
              }
       }

       protected boolean isMetaDataCacheable() {
              return true;
       }

       public List<ParameterType> getParameterTypes() {
              List<ParameterType> list = super.getParameterTypes();
              list.addAll(DatabaseHandler.getConnectionParameterTypes(this));
              list.addAll(DatabaseHandler.getQueryParameterTypes(this, false));
              list.addAll(DatabaseHandler.getStatementPreparationParamterTypes(this));

              list.add(new ParameterTypeCategory(ExampleSource.PARAMETER_DATAMANAGEMENT, "Determines, how the data is represented internally.",
                           DataRowFactory.TYPE_NAMES, DataRowFactory.TYPE_DOUBLE_ARRAY, false));
              return list;
       }

       @Override
       public void doWork() throws OperatorException {
              DBconnect();
              try {
                     resultSet = executeQuery();
              } catch (SQLException e1) {
                     // TODO Auto-generated catch block
                     e1.printStackTrace();
              }
              MetaData metaData = getGeneratedMetaData();
              try {
                     attributes = getAttributes(resultSet);
                     MemoryExampleTable et = createExampleTable(resultSet, attributes, rowCount, log);
                     
                     es = createExampleSet();

              } catch (SQLException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
              }
              // getGeneratedMetaData();
              getParameterTypes();
              exampleSetOutput.deliver(es);
       }

}

